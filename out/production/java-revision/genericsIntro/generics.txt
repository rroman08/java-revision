
GENERICS INTRODUCTION
=====================

Generics allow us to create classes, to design them, in a general way, without
really worrying about the specific details of the elements they might contain.

Java's ArrayList are an example of a generic class.

We can use an ArrayList for any type of object, because many of the methods on
that class can be applied to any type.


WHAT ARE GENERICS?
==================

Java supports generic types, such as classes, record, and interfaces. It also
supports generic methods.

Regular Class:

    class ITellYou {
        private String field;
    }

Generic Class:

    class YouTellMe<T> {
        private T field;
    }

* T is called a type identifier.

Reference Type      Type Parameter      Variable Name
ArrayList           <String>            listOfString


Many of Java's libraries are written using generic classes and interfaces.


GENERIC TYPE PARAMETERS
=======================

- E for element (used extensively by the Java Collections Framework)
- K for key (used for mapped types)
- N for number
- T for type
- V for value
- T, S, U, V etc., for 1st, 2nd, 3rd, 4th types


GENERIC CLASSES CAN BE BOUNDED: LIMITING THE TYPES THAT CAN BE USED
===================================================================

The 'extends' keyword does not have the same meaning as extends when it is
used in a class declaration. (Does not mean T extends Player)

    public class GenericTeam<T extends Player> {
        ...
    }

This is saying that the parameterised type T has to be a Player, OR a SUBTYPE of Player.

Player, in this case, could have been either a class or an interface, the syntax would be
the same.

This declaration establishes what is called an UPPER BOUND on the types that are allowed to
be used with this class.

